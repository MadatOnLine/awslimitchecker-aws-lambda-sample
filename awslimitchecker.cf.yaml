AWSTemplateFormatVersion: '2010-09-09'
Description: Regularly checks AWS limits

Resources:
  AwsLimitCheckerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/awslimitchecker:*"
          PolicyName: lambda-logs
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - apigateway:GET
                  - apigateway:HEAD
                  - apigateway:OPTIONS
                  - autoscaling:DescribeAccountLimits
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeLaunchConfigurations
                  - cloudformation:DescribeAccountLimits
                  - cloudformation:DescribeStacks
                  - cloudtrail:DescribeTrails
                  - cloudtrail:GetEventSelectors
                  - ds:GetDirectoryLimits
                  - dynamodb:DescribeLimits
                  - dynamodb:DescribeTable
                  - dynamodb:ListTables
                  - ec2:DescribeAccountAttributes
                  - ec2:DescribeAddresses
                  - ec2:DescribeInstances
                  - ec2:DescribeInternetGateways
                  - ec2:DescribeNatGateways
                  - ec2:DescribeNetworkAcls
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeReservedInstances
                  - ec2:DescribeRouteTables
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSnapshots
                  - ec2:DescribeSpotDatafeedSubscription
                  - ec2:DescribeSpotFleetInstances
                  - ec2:DescribeSpotFleetRequestHistory
                  - ec2:DescribeSpotFleetRequests
                  - ec2:DescribeSpotInstanceRequests
                  - ec2:DescribeSpotPriceHistory
                  - ec2:DescribeSubnets
                  - ec2:DescribeVolumes
                  - ec2:DescribeVpcs
                  - ec2:DescribeVpnGateways
                  - ecs:DescribeClusters
                  - ecs:DescribeServices
                  - ecs:ListClusters
                  - ecs:ListServices
                  - elasticache:DescribeCacheClusters
                  - elasticache:DescribeCacheParameterGroups
                  - elasticache:DescribeCacheSecurityGroups
                  - elasticache:DescribeCacheSubnetGroups
                  - elasticbeanstalk:DescribeApplicationVersions
                  - elasticbeanstalk:DescribeApplications
                  - elasticbeanstalk:DescribeEnvironments
                  - elasticfilesystem:DescribeFileSystems
                  - elasticloadbalancing:DescribeAccountLimits
                  - elasticloadbalancing:DescribeListeners
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeRules
                  - elasticloadbalancing:DescribeTargetGroups
                  - firehose:ListDeliveryStreams
                  - iam:GetAccountSummary
                  - lambda:GetAccountSettings
                  - rds:DescribeAccountAttributes
                  - rds:DescribeDBInstances
                  - rds:DescribeDBParameterGroups
                  - rds:DescribeDBSecurityGroups
                  - rds:DescribeDBSnapshots
                  - rds:DescribeDBSubnetGroups
                  - rds:DescribeEventSubscriptions
                  - rds:DescribeOptionGroups
                  - rds:DescribeReservedDBInstances
                  - redshift:DescribeClusterSnapshots
                  - redshift:DescribeClusterSubnetGroups
                  - route53:GetHostedZone
                  - route53:GetHostedZoneLimit
                  - route53:ListHostedZones
                  - s3:ListAllMyBuckets
                  - ses:GetSendQuota
                  - support:*
                  - trustedadvisor:Describe*
                  - trustedadvisor:RefreshCheck
                Effect: Allow
                Resource: "*"
          PolicyName: awslimitchecker
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - ses:SendEmail
                Effect: Allow
                Resource: "*"
          PolicyName: awslimitchecker-allow-send-emails

  LambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub
        - "/aws/lambda/${lambdaName}"
        - lambdaName: "awslimitchecker"
      RetentionInDays: 365

  AwsLimitCheckerFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: LambdaLogGroup
    Properties:
      Code:
        ZipFile: |
          print("hello world awslimitchecker")
      FunctionName: awslimitchecker
      Handler: main.handler
      MemorySize: 128
      Role: { "Fn::GetAtt": ["AwsLimitCheckerRole", "Arn"] }
      Runtime: python3.6
      Timeout: 300
      ReservedConcurrentExecutions: 1

  AwsLimitCheckerFunctionEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: awslimitchecker-event-rule
      ScheduleExpression: 'rate(1 hour)'
      State: ENABLED
      Targets:
        - Id: AwsLimitCheckerFunction
          Arn: { "Fn::GetAtt": ["AwsLimitCheckerFunction", "Arn"] }
  AwsLimitCheckerFunctionEventRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: {Ref: AwsLimitCheckerFunction}
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: { "Fn::GetAtt": ["AwsLimitCheckerFunctionEventRule", "Arn"] }

  LambdaExecutionAlert:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'awslimitchecker execution errors'
      AlarmName: awslimitchecker-lambda-execution-errors
      Namespace: AWS/Lambda
      AlarmActions: ['arn:aws:sns:eu-west-1:your_aws_account:your_sns_topic']
      InsufficientDataActions: ['arn:aws:sns:eu-west-1:your_aws_account:your_sns_topic']
      OKActions: ['arn:aws:sns:eu-west-1:your_aws_account:your_sns_topic']
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: awslimitchecker
      ComparisonOperator: GreaterThanThreshold
      Threshold: 2
      Period: 3600
      EvaluationPeriods: 3
      Statistic: Sum
      ActionsEnabled: True
